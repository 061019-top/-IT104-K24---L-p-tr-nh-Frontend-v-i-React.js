class Account {
    constructor(accountNumber, initialBalance) {
        this.accountNumber = accountNumber;
        this.balance = initialBalance;
        this.history = [];
        this.status = "active";
    }
    deposit(amount) {
        if (amount > 0) {
            this.balance += amount;
            this.history.push(`N·∫°p: +${amount} => S·ªë d∆∞: ${this.balance}`);
        }
        else {
            console.log("S·ªë ti·ªÅn n·∫°p ph·∫£i l·ªõn h∆°n 0");
        }
    }
    withdraw(amount) {
        if (amount > 0 && amount <= this.balance) {
            this.balance -= amount;
            this.history.push(`R√∫t: -${amount} => S·ªë d∆∞: ${this.balance}`);
        }
        else {
            console.log("Kh√¥ng th·ªÉ r√∫t s·ªë ti·ªÅn n√†y");
        }
    }
    showHistory() {
        console.log(`L·ªãch s·ª≠ giao d·ªãch c·ªßa t√†i kho·∫£n ${this.accountNumber}:`);
        this.history.forEach((entry) => console.log(entry));
    }
}
class SavingAccount extends Account {
    constructor(accountNumber, initialBalance, interestRate) {
        super(accountNumber, initialBalance);
        this.interestRate = interestRate;
    }
    withdraw(amount) {
        if (amount > 0 && this.balance - amount >= 0) {
            this.balance -= amount;
            this.history.push(`R√∫t: -${amount} => S·ªë d∆∞: ${this.balance}`);
        }
        else {
            console.log("Kh√¥ng th·ªÉ r√∫t v∆∞·ª£t qu√° s·ªë d∆∞");
        }
    }
}
// üß™ V√≠ d·ª• s·ª≠ d·ª•ng
const mySavingAcc = new SavingAccount("AC123456", 5000, 0.05);
mySavingAcc.deposit(1000); // N·∫°p ti·ªÅn
mySavingAcc.withdraw(2000); // R√∫t ti·ªÅn
mySavingAcc.withdraw(5000); // Qu√° s·ªë d∆∞, kh√¥ng ƒë∆∞·ª£c ph√©p
mySavingAcc.showHistory(); // In l·ªãch s·ª≠ giao d·ªãch
